heat_template_version: queens
## cli deploy
#$ openstack stack create --parameter FGT_count=2 -t cloudInit.yml demo 
# Utilisation des resourceGroup pour le deploiement des FGT
# pour update l'intra avec des FGT en +/- =>
#$ openstack stack update --wait --existing --parameter FGT_count=3 --parameter WS_count=3 demo

description: >
  Description TODO

################## PARAMETERS ##################
parameters:
  mgmt_net:
    type: string
    description: My private network
    default: "mgmt"
  public_net:
    type: string
    description: External network for floating ips
    default: "public"
  ingress_net:
    type: string
    description: External network for floating ips
    default: "Ingress"
  FGT_count:
    type: number
    description: Number of FGT deployed
    default: 1
  WS_count:
    type: number
    description: Number of Web Server deployed
    default: 1
  Ingress_FGT:
    type: string
    description: CIDR Ingress FGT
    default: "10.2.1"
  Egress_FGT:
    type: string
    description: CIDR Egress FGT
    default: "10.10.1"
  Web_Server_CIDR:
    type: string
    description: CIDR for Web servers subnet
    default: "10.100.1"
  Ingress_subnet_CIDR:
    type: string
    description: CIDR for Egress subnet
    default: "10.1.1"

################## RESOURCES ##################
resources:

# SUBNETs
  Ingress_FGT_net:
    type: OS::Neutron::Net
    properties:
      name: "Ingress FGTs net"

  Ingress_FGT_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "Ingress FGTs subnet"
      network_id: { get_resource: Ingress_FGT_net }
      cidr: { list_join: [".", [{ get_param: Ingress_FGT }, "0/24"]] }
      gateway_ip: { list_join: [".", [{ get_param: Ingress_FGT}, "254"]] }
      allocation_pools:
        - start: { list_join: [".", [{ get_param: Ingress_FGT}, "3"]] }
          end: { list_join: [".", [{ get_param: Ingress_FGT}, "250"]] }

  Egress_FGT_net:
    type: OS::Neutron::Net
    properties:
      name: "Egress FGTs net"

  Egress_FGT_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "Egress FGTs subnet"
      network_id: { get_resource: Egress_FGT_net }
      cidr: { list_join: [".", [{ get_param: Egress_FGT }, "0/24"]] }
      gateway_ip: null
      allocation_pools:
        - start: { list_join: [".", [{ get_param: Egress_FGT}, "3"]] }
          end: { list_join: [".", [{ get_param: Egress_FGT}, "250"]] }

  WS_net:
    type: OS::Neutron::Net
    properties:
      name: "Web server net"

  WS_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: "Web server subnet"
      network_id: { get_resource: WS_net }
      cidr: { list_join: [".", [{ get_param: Web_Server_CIDR }, "0/24"]] }
      gateway_ip: null
      allocation_pools:
        - start: { list_join: [".", [{ get_param: Web_Server_CIDR}, "3"]] }
          end: { list_join: [".", [{ get_param: Web_Server_CIDR}, "250"]] }

# INSTANCES

  # Single instance
  ADC:
    type: instance.yaml
    properties:
      hostname: "ADC"
      net_id_list:
        - { get_param: ingress_net }
        - { get_resource: Ingress_FGT_net }
        - { get_resource: WS_net }
        - { get_resource: Egress_FGT_net}]
      image: "fortiADC"
      flavor: "m1.medium"
      config: { get_file: ./config/fgt.conf }

# FGT ResourceGroup
  FGTs:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: FGT_count }
      resource_def:
        # .yml not supported ! .yaml or .template
        type: instance.yaml
        properties:
          image: "fgt604"
          flavor: "m1.amphora"
          net_id_list:
            - { get_resource: Ingress_FGT_net }
            - { get_resource: Egress_FGT_net }
          hostname: "FGT_%index%"
          config: { get_file: ./config/fgt.conf }


# UBUNTU ResourceGroup
  Web_Servers:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: WS_count }
      resource_def:
        type: instance.yaml
        properties:
          image: "ubuntu"
          flavor: "ds512M"
          net_id_list: [{ get_resource: WS_net }]
          hostname: "Web_server_%index%"
          config: { get_file: ./config/ubuntu.conf }

################## OUTPUTS ##################
outputs:
  ADC:
    value: ["ADC", { get_attr: [ADC, FloatingIP] }]
  FGTs:
    value: 
      repeat:
        template:
          [<%hostname%>, <%IP%>]
        for_each:
          <%IP%>: { get_attr: [FGTs, FloatingIP]}
          <%hostname%>: { get_attr: [FGTs, Hostname] }
        permutations: false
  Web_Servers:
    value:
      repeat:
        template:
          [<%hostname%>, <%IP%>]
        for_each:
          <%IP%>: { get_attr: [Web_Servers, FloatingIP]}
          <%hostname%>: { get_attr: [Web_Servers, Hostname] }
        permutations: false
